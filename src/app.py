import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

from flask import Flask
from flask import Response
from services import contractService, userService
from flask_cors import CORS
from db import connDB
from playhouse.shortcuts import model_to_dict, dict_to_model
from flask import request
from flask import jsonify
from containers import Container

#container = Container()
connDB = connDB.ConnDB()
app = Flask(__name__)
CORS(app, supports_credentials=True)

print("In app")
# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    print("Openning connection to db")
    connDB.connect_db()
    connDB.init_tables()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    print("Closing connection to db")
    connDB.close_connection()

@app.route('/')
def hello():
    return 'Hello, World!'

@app.route('/contract/<contract_uuid>')
def get_contract(contract_uuid): 
    try:        
        contract = contractService.get_contract(contract_uuid)
        #print(contract['Sentence'])
        paragraphs =  contractService.get_sentences(contract.id)
        paragraphs = [model_to_dict(paragraph) for paragraph in paragraphs]

        return {'paragraphs':paragraphs}
    except Exception as error:
        return Response(error.args[0], status=404, mimetype='application/json')

@app.route('/contracts/<user_uuid>')
def get_user_contracts(user_uuid):
    try:
        user = userService.get_user_by_uuid(user_uuid)
        contracts = contractService.get_contracts(user.id)
        contracts = [model_to_dict(contract) for contract in contracts]        
        return {'contracts':contracts}
    except Exception as error:
        return Response(error.args[0], status=404, mimetype='application/json')

@app.route('/user', methods = ['POST'])
def add_user(): 
    try:
        user_data = request.get_json(force=True)        
        user = userService.create_new_user( 
            user_data['username'], user_data['password'], 
            user_data['email'])
        print('user was added')
        resp = jsonify(success=True, user_uuid=user.uuid)
        return resp
    except Exception as error:
        return Response(error.args[0], status=404, mimetype='application/json')

############## DANGEROUS FUNCTIONS, SHOULD BE REMOVED IN PRODUCTION #########################
@app.route('/users')
def get_users(): 
    try:
        users = userService.get_users()        
        return {'all_users':users}
    except Exception as error:
        return Response(error.args[0], status=404, mimetype='application/json')